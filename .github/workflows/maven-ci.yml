name: Maven CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # ステージ1: コードのビルドとコンパイル
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [11, 17]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
    
    - name: 🔨 Compile project
      run: mvn clean compile
    
    - name: 📦 Upload compiled classes
      uses: actions/upload-artifact@v4
      with:
        name: compiled-classes-java-${{ matrix.java-version }}
        path: target/classes
        retention-days: 1

  # ステージ2: 単体テストの実行
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        java-version: [11, 17]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
    
    - name: 📥 Download compiled classes
      uses: actions/download-artifact@v4
      with:
        name: compiled-classes-java-${{ matrix.java-version }}
        path: target/classes
    
    - name: 🧪 Run unit tests
      run: mvn test -DskipCompile
    
    - name: 📊 Generate test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results - Java ${{ matrix.java-version }}
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: false
    
    - name: 📈 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-java-${{ matrix.java-version }}
        path: target/surefire-reports/
        retention-days: 7

  # ステージ3: 静的解析
  code-analysis:
    name: 🔍 Code Analysis
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        java-version: [11, 17]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
    
    - name: 📥 Download compiled classes
      uses: actions/download-artifact@v4
      with:
        name: compiled-classes-java-${{ matrix.java-version }}
        path: target/classes
    
    - name: 🐛 Run SpotBugs analysis
      run: mvn spotbugs:check
    
    - name: 📄 Generate SpotBugs report
      if: always()
      run: mvn spotbugs:spotbugs
    
    - name: 📤 Upload SpotBugs results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: spotbugs-results-java-${{ matrix.java-version }}
        path: |
          target/spotbugsXml.xml
          target/site/spotbugs.html
        retention-days: 7

  # ステージ4: パッケージング
  package:
    name: 📦 Package
    runs-on: ubuntu-latest
    needs: [test, code-analysis]
    strategy:
      matrix:
        java-version: [11, 17]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
    
    - name: 📦 Package application
      run: mvn package -DskipTests
    
    - name: 📤 Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar-java-${{ matrix.java-version }}
        path: target/*.jar
        retention-days: 30

  # ステージ5: すべてのチェックが成功したかの確認
  quality-gate:
    name: ✅ Quality Gate
    runs-on: ubuntu-latest
    needs: [test, code-analysis, package]
    
    steps:
    - name: 🎉 All checks passed
      run: |
        echo "✅ Build successful"
        echo "✅ All tests passed"
        echo "✅ Code analysis completed"
        echo "✅ Package created successfully"
        echo ""
        echo "🚀 Ready for deployment!"
name: Maven CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # ステージ1: コードのビルドとコンパイル
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [11, 17]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
    
    - name: Compile project
      run: mvn clean compile
    
    - name: Upload compiled classes
      uses: actions/upload-artifact@v4
      with:
        name: compiled-classes-java-${{ matrix.java-version }}
        path: target/classes
        retention-days: 1

  # ステージ2: 単体テストの実行
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        java-version: [11, 17]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
    
    - name: Download compiled classes
      uses: actions/download-artifact@v4
      with:
        name: compiled-classes-java-${{ matrix.java-version }}
        path: target/classes
    
    - name: Run unit tests
      run: mvn test -DskipCompile
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results - Java ${{ matrix.java-version }}
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-java-${{ matrix.java-version }}
        path: target/surefire-reports/
        retention-days: 7
    
    - name: Generate coverage report
      run: mvn jacoco:report
      if: always()
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-java-${{ matrix.java-version }}

  # ステージ3: 静的解析
  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        java-version: [11, 17]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
    
    - name: Download compiled classes
      uses: actions/download-artifact@v4
      with:
        name: compiled-classes-java-${{ matrix.java-version }}
        path: target/classes
    
    - name: Run SpotBugs analysis
      run: mvn spotbugs:check
      continue-on-error: true
    
    - name: Generate SpotBugs HTML report
      if: always()
      run: mvn spotbugs:spotbugs -DskipTests
    
    - name: Upload SpotBugs results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: spotbugs-results-java-${{ matrix.java-version }}
        path: |
          target/spotbugsXml.xml
          target/site/spotbugs.html
        retention-days: 7
    
    - name: Publish SpotBugs results
      uses: jwgmeligmeyling/spotbugs-github-action@master
      if: always()
      with:
        path: target/spotbugsXml.xml

  # ステージ4: パッケージング
  package:
    name: Package
    runs-on: ubuntu-latest
    needs: [test, code-analysis]
    strategy:
      matrix:
        java-version: [11, 17]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
    
    - name: Package application
      run: mvn package -DskipTests
    
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar-java-${{ matrix.java-version }}
        path: target/*.jar
        retention-days: 30

  # ステージ5: テスト結果のサマリー
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, code-analysis]
    if: always()
    
    steps:
    - name: Download test results for Java 11
      uses: actions/download-artifact@v4
      with:
        name: test-results-java-11
        path: test-results-11
    
    - name: Download test results for Java 17
      uses: actions/download-artifact@v4
      with:
        name: test-results-java-17
        path: test-results-17
    
    - name: Download SpotBugs results for Java 11
      uses: actions/download-artifact@v4
      with:
        name: spotbugs-results-java-11
        path: spotbugs-11
    
    - name: Download SpotBugs results for Java 17
      uses: actions/download-artifact@v4
      with:
        name: spotbugs-results-java-17
        path: spotbugs-17
    
    - name: Create summary report
      run: |
        echo "# Test and Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Java Version | Tests Run | Passed | Failed | Skipped | Time |" >> $GITHUB_STEP_SUMMARY
        echo "|--------------|-----------|--------|--------|---------|------|" >> $GITHUB_STEP_SUMMARY
        
        for version in 11 17; do
          if [ -d test-results-$version ]; then
            # Parse test results from XML files
            total_tests=0
            total_failures=0
            total_errors=0
            total_skipped=0
            total_time=0
            
            for xml in test-results-$version/*.xml; do
              if [ -f "$xml" ]; then
                tests=$(grep -o 'tests="[0-9]*"' "$xml" | grep -o '[0-9]*' || echo 0)
                failures=$(grep -o 'failures="[0-9]*"' "$xml" | grep -o '[0-9]*' || echo 0)
                errors=$(grep -o 'errors="[0-9]*"' "$xml" | grep -o '[0-9]*' || echo 0)
                skipped=$(grep -o 'skipped="[0-9]*"' "$xml" | grep -o '[0-9]*' || echo 0)
                time=$(grep -o 'time="[0-9.]*"' "$xml" | grep -o '[0-9.]*' || echo 0)
                
                total_tests=$((total_tests + tests))
                total_failures=$((total_failures + failures))
                total_errors=$((total_errors + errors))
                total_skipped=$((total_skipped + skipped))
                total_time=$(echo "$total_time + $time" | bc)
              fi
            done
            
            passed=$((total_tests - total_failures - total_errors - total_skipped))
            status="✅"
            if [ $total_failures -gt 0 ] || [ $total_errors -gt 0 ]; then
              status="❌"
            fi
            
            echo "| Java $version | $total_tests | $passed | $((total_failures + total_errors)) | $total_skipped | ${total_time}s |" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Static Analysis Results (SpotBugs)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for version in 11 17; do
          echo "### Java $version" >> $GITHUB_STEP_SUMMARY
          
          if [ -f spotbugs-$version/spotbugsXml.xml ]; then
            # Parse SpotBugs XML report
            total_bugs=$(grep -c '<BugInstance' spotbugs-$version/spotbugsXml.xml || echo 0)
            
            if [ $total_bugs -eq 0 ]; then
              echo "✅ **No bugs found!**" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Total bugs found: $total_bugs**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Count bugs by priority
              high_priority=$(grep -c 'priority="1"' spotbugs-$version/spotbugsXml.xml || echo 0)
              medium_priority=$(grep -c 'priority="2"' spotbugs-$version/spotbugsXml.xml || echo 0)
              low_priority=$(grep -c 'priority="3"' spotbugs-$version/spotbugsXml.xml || echo 0)
              
              echo "| Priority | Count |" >> $GITHUB_STEP_SUMMARY
              echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| High | $high_priority |" >> $GITHUB_STEP_SUMMARY
              echo "| Medium | $medium_priority |" >> $GITHUB_STEP_SUMMARY
              echo "| Low | $low_priority |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # List bug categories
              echo "**Bug Categories:**" >> $GITHUB_STEP_SUMMARY
              categories=$(grep -o 'category="[^"]*"' spotbugs-$version/spotbugsXml.xml | sort | uniq -c | sort -nr)
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "$categories" | while read count cat; do
                category=$(echo $cat | sed 's/category="//' | sed 's/"//')
                echo "$count occurrences: $category" >> $GITHUB_STEP_SUMMARY
              done
              echo '```' >> $GITHUB_STEP_SUMMARY
              
              # List top 5 bug types
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Top Bug Types:**" >> $GITHUB_STEP_SUMMARY
              bug_types=$(grep -o 'type="[^"]*"' spotbugs-$version/spotbugsXml.xml | sort | uniq -c | sort -nr | head -5)
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "$bug_types" | while read count type; do
                bug_type=$(echo $type | sed 's/type="//' | sed 's/"//')
                echo "$count occurrences: $bug_type" >> $GITHUB_STEP_SUMMARY
              done
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **SpotBugs report not found**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        done
        
        # Add links to artifacts
        echo "## 📎 Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Test results and SpotBugs reports are available in the workflow artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- SpotBugs HTML reports provide detailed bug descriptions" >> $GITHUB_STEP_SUMMARY

  # ステージ6: すべてのチェックが成功したかの確認
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, code-analysis, package]
    
    steps:
    - name: All checks passed
      run: |
        echo "Build successful"
        echo "All tests passed"
        echo "Code analysis completed"
        echo "Package created successfully"
        echo ""
        echo "Ready for deployment!"
name: Maven CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # ステージ1: コードのビルドとコンパイル
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [11, 17]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
    
    - name: Compile project
      run: mvn clean compile
    
    - name: Upload compiled classes
      uses: actions/upload-artifact@v4
      with:
        name: compiled-classes-java-${{ matrix.java-version }}
        path: target/classes
        retention-days: 1

  # ステージ2: 単体テストの実行
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        java-version: [11, 17]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
    
    - name: Download compiled classes
      uses: actions/download-artifact@v4
      with:
        name: compiled-classes-java-${{ matrix.java-version }}
        path: target/classes
    
    - name: Run unit tests
      run: mvn test -DskipCompile
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results - Java ${{ matrix.java-version }}
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-java-${{ matrix.java-version }}
        path: target/surefire-reports/
        retention-days: 7
    
    - name: Generate coverage report
      run: mvn jacoco:report
      if: always()
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-java-${{ matrix.java-version }}

  # ステージ3: 静的解析
  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        java-version: [11, 17]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
    
    - name: Download compiled classes
      uses: actions/download-artifact@v4
      with:
        name: compiled-classes-java-${{ matrix.java-version }}
        path: target/classes
    
    - name: Run SpotBugs analysis
      run: mvn spotbugs:check
      continue-on-error: true
    
    - name: Generate SpotBugs HTML report
      if: always()
      run: mvn spotbugs:spotbugs -DskipTests
    
    - name: Upload SpotBugs results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: spotbugs-results-java-${{ matrix.java-version }}
        path: |
          target/spotbugsXml.xml
          target/site/spotbugs.html
        retention-days: 7
    
    - name: Publish SpotBugs results
      uses: jwgmeligmeyling/spotbugs-github-action@master
      if: always()
      with:
        path: target/spotbugsXml.xml

  # ステージ4: パッケージング
  package:
    name: Package
    runs-on: ubuntu-latest
    needs: [test, code-analysis]
    strategy:
      matrix:
        java-version: [11, 17]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
    
    - name: Package application
      run: mvn package -DskipTests
    
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar-java-${{ matrix.java-version }}
        path: target/*.jar
        retention-days: 30

  # ステージ5: テスト結果のサマリー
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, code-analysis]
    if: always()
    
    steps:
    - name: Download test results for Java 11
      uses: actions/download-artifact@v4
      with:
        name: test-results-java-11
        path: test-results-11
    
    - name: Download test results for Java 17
      uses: actions/download-artifact@v4
      with:
        name: test-results-java-17
        path: test-results-17
    
    - name: Download SpotBugs results for Java 11
      uses: actions/download-artifact@v4
      with:
        name: spotbugs-results-java-11
        path: spotbugs-11
    
    - name: Download SpotBugs results for Java 17
      uses: actions/download-artifact@v4
      with:
        name: spotbugs-results-java-17
        path: spotbugs-17
    
    - name: Create summary report
      run: |
        echo "# Test and Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Java Version | Test Files | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------------|------------|--------|" >> $GITHUB_STEP_SUMMARY
        
        for version in 11 17; do
          test_count=$(find test-results-$version -name "*.xml" | wc -l)
          echo "| Java $version | $test_count test files | ✓ |" >> $GITHUB_STEP_SUMMARY
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Static Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "| Java Version | Analysis Report |" >> $GITHUB_STEP_SUMMARY
        echo "|--------------|----------------|" >> $GITHUB_STEP_SUMMARY
        
        for version in 11 17; do
          if [ -f spotbugs-$version/spotbugsXml.xml ]; then
            echo "| Java $version | SpotBugs report generated |" >> $GITHUB_STEP_SUMMARY
          fi
        done

  # ステージ6: すべてのチェックが成功したかの確認
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, code-analysis, package]
    
    steps:
    - name: All checks passed
      run: |
        echo "Build successful"
        echo "All tests passed"
        echo "Code analysis completed"
        echo "Package created successfully"
        echo ""
        echo "Ready for deployment!"